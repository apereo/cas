ext.libraries = [
        acme                       : [
                dependencies.create("org.shredzone.acme4j:acme4j-client:$acmeClientVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.bitbucket.b_c", module: "jose4j")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                }
        ],
        slack                      : [
                dependencies.create("com.slack.api:slack-api-client:$slackClientVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        googlecloudpubsub          : [
                dependencies.create("com.google.cloud:spring-cloud-gcp-starter-pubsub:$googleCloudSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("com.google.cloud:google-cloud-monitoring:$googleCloudMonitorVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        permitio          : [
                dependencies.create("io.permit:permit-sdk-java:$permitioVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        googlecloudlogging          : [
                dependencies.create("com.google.cloud:spring-cloud-gcp-starter-logging:$googleCloudSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "ch.qos.logback.contrib", module: "logback-json-classic")
                    exclude(group: "com.google.cloud", module: "google-cloud-logging-logback")
                    exclude(group: "net.logstash.logback", module: "logstash-logback-encoder")
                }
        ],
        googlecloudsecretsmanager  : [
                dependencies.create("com.google.cloud:spring-cloud-gcp-secretmanager:$googleCloudSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("com.google.cloud:spring-cloud-gcp-starter-secretmanager:$googleCloudSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        googlecloudfirestore       : [
                dependencies.create("com.google.cloud:spring-cloud-gcp-starter-data-firestore:$googleCloudSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "io.projectreactor", module: "reactor-core")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                },
                dependencies.create("com.google.cloud:spring-cloud-gcp-data-firestore:$googleCloudSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "io.projectreactor", module: "reactor-core")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                }
        ],
        firebaseadmin              : [
                dependencies.create("com.google.api-client:google-api-client:$googleApiClientVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("com.google.firebase:firebase-admin:$firebaseAdminVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        elasticapmagent : [
                dependencies.create("co.elastic.apm:apm-agent-attach:$elasticApmVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("co.elastic.apm:apm-agent-api:$elasticApmVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        aspectj                    : [
                dependencies.create("org.aspectj:aspectjrt:$aspectjVersion") {
                },
                dependencies.create("org.aspectj:aspectjweaver:$aspectjVersion") {
                }
        ],
        sendgrid                   : [
                dependencies.create("com.sendgrid:sendgrid-java:$sendGridVersion") {
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        javamelody                 : [
                dependencies.create("net.bull.javamelody:javamelody-spring-boot-starter:$javaMelodyVersion") {
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                }
        ],
        jgit                       : [
                dependencies.create("org.eclipse.jgit:org.eclipse.jgit:$jgitVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                },
                dependencies.create("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:$jgitVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                },
                dependencies.create("org.eclipse.jgit:org.eclipse.jgit.http.apache:$jgitVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                }
        ],
        webauthn                   : [
                dependencies.create("com.upokecenter:cbor:$cborVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("com.yubico:webauthn-server-core:$yubicoWebauthnVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-yaml")
                    exclude(group: "javax.ws.rs", module: "javax.ws.rs-api")
                    exclude(group: "org.eclipse.jetty", module: "jetty-eclipse")
                    exclude(group: "org.glassfish.jersey.containers", module: "jersey-container-servlet-core")
                },
                dependencies.create("com.yubico:webauthn-server-attestation:$yubicoWebauthnVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-yaml")
                    exclude(group: "javax.ws.rs", module: "javax.ws.rs-api")
                    exclude(group: "org.eclipse.jetty", module: "jetty-eclipse")
                    exclude(group: "org.glassfish.jersey.containers", module: "jersey-container-servlet-core")
                },
                dependencies.create("com.yubico:yubico-util:$yubicoWebauthnVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-yaml")
                    exclude(group: "com.fasterxml.jackson.dataformat", module: "jackson-dataformat-cbor")
                    exclude(group: "javax.ws.rs", module: "javax.ws.rs-api")
                    exclude(group: "org.eclipse.jetty", module: "jetty-eclipse")
                    exclude(group: "org.glassfish.jersey.containers", module: "jersey-container-servlet-core")
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                }
        ],
        semver                     : [
                dependencies.create("com.vdurmont:semver4j:$semverVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        splunklogging              : [
                dependencies.create("com.splunk.logging:splunk-library-javalogging:$splunkLoggingVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        oshi                       : [
                dependencies.create("com.github.oshi:oshi-core:$oshiVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "net.java.dev.jna", module: "jna-platform")
                    exclude(group: "net.java.dev.jna", module: "jna")
                }
        ],
        springdoc                  : [
                dependencies.create("org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                }
        ],
        swaggerannotations         : [
                dependencies.create("io.swagger.core.v3:swagger-annotations:$swaggerVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                }
        ],
        swagger                    : [
                dependencies.create("io.swagger.core.v3:swagger-core-jakarta:$swaggerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.validation", module: "validation-api")
                },
                dependencies.create("io.swagger.core.v3:swagger-jaxrs2-jakarta:$swaggerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.validation", module: "validation-api")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                },
                dependencies.create("io.swagger.core.v3:swagger-models:$swaggerVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                }
        ],
        influxdb                   : [
                dependencies.create("com.influxdb:influxdb-client-java:$influxDbVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.retrofit2", module: "retrofit")
                    exclude(group: "com.squareup.okio", module: "okio")
                }
        ],
        bouncycastle               : [
                dependencies.create("org.bouncycastle:bcpkix-jdk18on:$bouncyCastleVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.cryptacular:cryptacular:$cryptacularVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk18on")
                },
                dependencies.create("org.bouncycastle:bcprov-jdk18on:$bouncyCastleVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                }
        ],
        dropwizard                 : [
                dependencies.create("io.dropwizard.metrics:metrics-core:$dropwizardVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        sentry                     : [
                dependencies.create("io.sentry:sentry-spring-boot-starter-jakarta:$sentryVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("io.sentry:sentry-log4j2:$sentryVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        cassandra                  : [
                dependencies.create("org.apache.cassandra:java-driver-core:$apacheCassandraVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.groovy", module: "groovy-json")
                    exclude(group: "org.codehaus.groovy", module: "groovy")
                },
                dependencies.create("org.apache.cassandra:java-driver-mapper-runtime:$apacheCassandraVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.groovy", module: "groovy-json")
                    exclude(group: "org.codehaus.groovy", module: "groovy")
                    exclude(group: "com.datastax.oss", module: "java-driver-core")
                },
                dependencies.create("org.springframework.data:spring-data-cassandra:$springDataCassandraVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "org.codehaus.groovy", module: "groovy")
                    exclude(group: "org.codehaus.groovy", module: "groovy-json")
                    exclude(group: "com.datastax.oss", module: "java-driver-mapper-runtime")
                }
        ],
        apachefediz                : [
                dependencies.create("org.apache.cxf.fediz:fediz-core:$apacheFedizVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                },
        ],
        apachecxf                  : [
                dependencies.create("org.apache.cxf:cxf-rt-transports-http:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf:cxf-rt-frontend-jaxws:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf:cxf-rt-ws-security:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-stax")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-policy-stax")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-policy")
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-security-sso-saml:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-stax")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                },
                dependencies.create("org.apache.cxf:cxf-rt-ws-policy:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-stax")
                },
                dependencies.create("org.apache.cxf:cxf-rt-ws-addr:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-client:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf:cxf-rt-frontend-jaxrs:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-service-description:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf:cxf-rt-rs-extension-providers:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.ow2.asm", module: "asm")
                },
                dependencies.create("org.apache.cxf.services.sts:cxf-services-sts-core:$apacheCxfVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "org.codehaus.woodstox", module: "woodstox-core-asl")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-stax")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-policy-stax")
                    exclude(group: "org.apache.cxf", module: "cxf-rt-ws-security")
                }
        ],
        apachecxfsearch            : dependencies.create("org.apache.cxf:cxf-rt-rs-extension-search:$apacheCxfVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "org.ow2.asm", module: "asm")
        },
        casclient                  : dependencies.create("org.apereo.cas.client:cas-client-core:$casClientVersion") {
            exclude(group: "javax.servlet", module: "servlet-api")
            exclude(group: "org.slf4j", module: "log4j-over-slf4j")
            exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "org.glassfish.jaxb", module: "jaxb-core")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "org.apereo.cas.client", module: "cas-client-support-saml")
        },
        commons                    : [
                dependencies.create("commons-io:commons-io:$commonsIoVersion") {
                },
                dependencies.create("org.apache.commons:commons-jexl3:$commonsJexlVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "junit", module: "junit")
                },
                dependencies.create("org.apache.commons:commons-text:$commonsTextVersion") {
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                },
                dependencies.create("org.apache.commons:commons-pool2:$commonsPoolVersion") {
                },
                dependencies.create("commons-cli:commons-cli:$commonsCliVersion") {
                },
                dependencies.create("commons-beanutils:commons-beanutils:$commonsBeansVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-collections", module: "commons-collections")
                },
                dependencies.create("commons-validator:commons-validator:$commonsValidatorVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "commons-digester", module: "commons-digester")
                },
                dependencies.create("commons-codec:commons-codec:$commonsCodecVersion") {
                },
                dependencies.create("org.apache.commons:commons-lang3:$commonsLangVersion") {
                },
                dependencies.create("commons-lang:commons-lang:2.6") {
                },
                dependencies.create("org.jooq:jool:$joolVersion") {
                },
                dependencies.create("commons-collections:commons-collections:$commonsCollections3Version") {
                },
                dependencies.create("org.apache.commons:commons-collections4:$commonsCollectionsVersion") {
                }
        ],
        groovy                     : [
                dependencies.create("org.apache.groovy:groovy-jsr223:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-json:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-yaml:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-xml:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-datetime:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-templates:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-sql:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.apache.groovy:groovy-groovysh:$groovyVersion") {
                    exclude(group: "org.apache.groovy", module: "groovy-swing")
                    exclude(group: "org.apache.groovy", module: "groovy-console")
                }
        ],
        grouper                    : dependencies.create("edu.internet2.middleware.grouper:grouperClient:$grouperVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "junit", module: "junit")
            exclude(group: "joda-time", module: "joda-time")
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "xml-apis", module: "xml-apis")
            exclude(group: "xom", module: "xom")
            exclude(group: "commons-lang", module: "commons-lang")
            exclude(group: "javax.mail", module: "mail")
            exclude(group: "commons-beanutils", module: "commons-beanutils")
            exclude(group: "org.quartz-scheduler", module: "quartz")
            exclude(group: "log4j", module: "log4j")
        },
        cqengine                   : [
                dependencies.create("com.googlecode.cqengine:cqengine:$cqEngineVersion") {
                    exclude(group: 'org.xerial', module: "sqlite-jdbc")
                }
        ],
        maxmind                    : [
                dependencies.create("com.maxmind.geoip2:geoip2:$maxmindVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                }
        ],
        azuremaps : [
                dependencies.create("com.azure:azure-maps-geolocation:$azureMapsGeoLocationVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("com.azure:azure-maps-search:$azureMapsGeoLocationVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("com.azure:azure-identity:$azureIdentityVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        googlegeocoding            : [
                dependencies.create("com.google.maps:google-maps-services:$googleMapsGeoCodingVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.okio", module: "okio")
                },
                dependencies.create("com.squareup.okhttp3:okhttp:$okhttp3Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        ipgeolocation              : [
                dependencies.create("io.ipgeolocation:ipgeolocation:$ipGeoLocationVersion") {
                    exclude(group: "org.json", module: "json")
                },
                dependencies.create("org.json:json:$jsonVersion") {
                }
        ],
        okhttp                     : [
                dependencies.create("com.squareup.okhttp:okhttp-urlconnection:$okioHttpVersion") {
                    exclude(group: "com.squareup.okio", module: "okio")
                },
                dependencies.create("com.squareup.okio:okio:$okioVersion") {
                }
        ],
        caffein                    : [
                dependencies.create("com.github.ben-manes.caffeine:caffeine:$caffeineVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                },
                dependencies.create("com.github.ben-manes.caffeine:guava:$caffeineVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                }
        ],
        websockets                 : [
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-websocket:$tomcatVersion") {
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-websocket:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                },
                dependencies.create("org.webjars:sockjs-client:$socketJsClientVersion"),
                dependencies.create("org.webjars:stomp-websocket:$stompWebSocketVersion")
        ],
        guava                      : [
                dependencies.create("com.google.guava:guava:$guavaVersion") {
                    exclude(group: "com.google.errorprone", module: "error_prone_annotations")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                    exclude(group: "org.checkerframework", module: "checker-qual")
                }
        ],
        classgraph                 : [
                dependencies.create("io.github.classgraph:classgraph:$classgraphVersion")
        ],
        hazelcast                  : [
                dependencies.create("com.hazelcast:hazelcast:$hazelcastVersion") {
                },
                dependencies.create("com.hazelcast:hazelcast-sql:$hazelcastVersion") {
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apiguardian:apiguardian-api:$apiGuardianVersion") {
                }
        ],
        hazelcastzookeeper         : [
                dependencies.create("com.hazelcast:hazelcast-zookeeper:$hazelcastZooKeeperVersion") {
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        hazelcastswarm             : [
                dependencies.create("org.bitsofinfo:hazelcast-docker-swarm-discovery-spi:$hazelcastSwarmVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "com.hazelcast", module: "hazelcast")
                    exclude(group: "com.spotify", module: "docker-client")
                }
        ],
        jclouds                    : [
                dependencies.create("com.hazelcast:hazelcast-jclouds:$hazelcastJCloudsVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.hazelcast", module: "hazelcast")
                },
                dependencies.create("org.apache.jclouds:jclouds-compute:$jcloudsVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.jclouds:jclouds-allcompute:$jcloudsVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.jclouds.labs:google-compute-engine:$jcloudsGoogleEngineVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        jasypt                     : dependencies.create("org.jasypt:jasypt:$jasyptVersion") {
            exclude(group: "commons-cli", module: "commons-cli")
            exclude(group: "org.slf4j", module: "slf4j-api")
        },
        hikaricp                   : [
                dependencies.create("com.zaxxer:HikariCP:$hikariVersion") {
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        eclipselink                : [
                dependencies.create("org.eclipse.persistence:org.eclipse.persistence.jpa:$eclipseLinkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        hibernatevalidator         : [
                dependencies.create("org.hibernate.validator:hibernate-validator:$hibernateValidatorVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.hibernate", module: "hibernate-ant")
                }
        ],
        hibernate                  : [
                dependencies.create("io.hypersistence:hypersistence-utils-hibernate-62:$hypersistenceVersion") {
                    exclude(group: "javax.xml.bind", module: "jaxb-api")
                },
                dependencies.create("org.hibernate.orm:hibernate-graalvm:$hibernateVersion") {
                },
                dependencies.create("org.hibernate.orm:hibernate-core:$hibernateVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.dom4j", module: "dom4j")
                    exclude(group: "org.glassfish.jaxb", module: "jaxb-runtime")
                },
                dependencies.create("org.hibernate.orm:hibernate-ant:$hibernateVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.dom4j", module: "dom4j")
                    exclude(group: "org.glassfish.jaxb", module: "jaxb-runtime")
                },
                dependencies.create("org.dom4j:dom4j:$dom4jVersion") {
                    exclude(group: "xml-apis", module: "xml-apis")
                },
                dependencies.create("org.hibernate.orm:hibernate-hikaricp:$hibernateVersion") {
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.dom4j", module: "dom4j")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                }
        ],
        httpclient                 : [
                dependencies.create("org.apache.httpcomponents.client5:httpclient5:$httpclientVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents.core5", module: "httpcore5")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.httpcomponents.core5:httpcore5:$httpCoreVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        httpclient4                : [
                dependencies.create("org.apache.httpcomponents:httpclient:$httpclient4Version") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.httpcomponents:httpcore:$httpCore4Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awsverifiedpermissions          : [
                dependencies.create("software.amazon.awssdk:verifiedpermissions:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awsclouddirectory          : [
                dependencies.create("software.amazon.awssdk:clouddirectory:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        aws                        : [
                dependencies.create("software.amazon.awssdk:core:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("software.amazon.awssdk:aws-core:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("software.amazon.awssdk:apache-client:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awssns                     : [
                dependencies.create("software.amazon.awssdk:sns:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awssts                     : [
                dependencies.create("software.amazon.awssdk:sts:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awsssm                     : [
                dependencies.create("software.amazon.awssdk:ssm:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awss3                      : [
                dependencies.create("software.amazon.awssdk:s3:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awscognito                 : [
                dependencies.create("software.amazon.awssdk:cognitoidentity:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("software.amazon.awssdk:cognitoidentityprovider:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awssecretsmanager          : [
                dependencies.create("software.amazon.awssdk:secretsmanager:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awscloudwatch              : [
                dependencies.create("software.amazon.awssdk:cloudwatchlogs:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("software.amazon.awssdk:cloudwatch:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                }
        ],
        awsjavadynamodb            : [
                dependencies.create("software.amazon.awssdk:dynamodb:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("software.amazon.dax:amazon-dax-client:$amazonDaxVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        awssqs                     : [
                dependencies.create("software.amazon.awssdk:sqs:$amazonSdkVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                }
        ],
        apachevelocity             : [
                dependencies.create("org.apache.velocity:velocity-engine-core:$apacheVelocityEngineVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                }
        ],
        googleauth                 : [
                dependencies.create("com.warrenstrange:googleauth:$googleAuthVersion") {
                    transitive = false
                }
        ],
        graalvmsdk                 : [
                dependencies.create("org.graalvm.sdk:graal-sdk:${graalVmVersion}") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                }
        ],
        graalvmpolyglot                 : [
                dependencies.create("org.graalvm.polyglot:polyglot:${graalVmVersion}") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                }
        ],
        zxingbarcode               : [
                dependencies.create("com.google.zxing:core:$googleZxingVersion") {
                    exclude(group: "com.google.zxing", module: "android-core")
                    exclude(group: "com.google.zxing", module: "android-integration")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                }
        ],
        shibutiljavasupport        : [
                dependencies.create("net.shibboleth:shib-support:$shibbolethUtilJavaSupportVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-core")
                    exclude(group: "io.dropwizard.metrics", module: "metrics-json")
                    exclude(group: "net.shibboleth.idp", module: "idp-authn-api")
                }
        ],
        ignite                     : [
                dependencies.create("org.apache.ignite:ignite-core:$apacheIgniteVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                },
                dependencies.create("org.apache.ignite:ignite-log4j2:$apacheIgniteVersion") {
                    exclude(group: "log4j", module: "log4j")
                },
                dependencies.create("org.apache.ignite:ignite-indexing:$apacheIgniteVersion") {
                    exclude(group: "log4j", module: "log4j")
                },
                dependencies.create("org.apache.ignite:ignite-spring:$apacheIgniteVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                }
        ],
        jakarta                    : [
                dependencies.create("jakarta.validation:jakarta.validation-api:$jakartaValidationVersion"),
                dependencies.create("jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion") {
                    transitive = false
                },
                dependencies.create("com.sun.xml.bind:jaxb-impl:$jaxbImplVersion") {
                    transitive = false
                },
                dependencies.create("jakarta.xml.ws:jakarta.xml.ws-api:$wsApiVersion") {
                    transitive = false
                },
                dependencies.create("com.sun.xml.stream.buffer:streambuffer:2.1.0") {
                    transitive = false
                },
                dependencies.create("com.sun.xml.ws:jaxws-rt:$jaxbRuntimeVersion") {
                    transitive = false
                },
                dependencies.create("jakarta.xml.soap:jakarta.xml.soap-api:$jakartaSoapApiVersion") {
                    transitive = false
                },
                dependencies.create("jakarta.servlet:jakarta.servlet-api:$jakartaServletVersion") {
                },
                dependencies.create("jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationApiVersion") {
                },
                dependencies.create("jakarta.activation:jakarta.activation-api:$jakartaActivationVersion") {
                },
                dependencies.create("jakarta.persistence:jakarta.persistence-api:$jpaPersistenceApiVersion") {
                    exclude(group: "xml-apis", module: "xml-apis")
                },
                dependencies.create("jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:$jakartaJstlVersion"),
                dependencies.create("jakarta.transaction:jakarta.transaction-api:$jtaVersion"),
                dependencies.create("jakarta.el:jakarta.el-api:$jakartaElVersion") {
                },
                dependencies.create("org.glassfish.expressly:expressly:$jakartaElImplVersion") {
                }
        ],
        springamqp                 : [
                dependencies.create("org.springframework.boot:spring-boot-starter-amqp:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                },
                dependencies.create("org.springframework.amqp:spring-rabbit:$springRabbitVersion")
        ],
        thymeleaf                  : [
                dependencies.create("org.thymeleaf:thymeleaf-spring6:$thymeleafVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.thymeleaf", module: "thymeleaf-spring5")
                    exclude(group: "org.thymeleaf", module: "thymeleaf")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.sourceforge.nekohtml", module: "nekohtml")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                },
                dependencies.create("org.thymeleaf:thymeleaf:$thymeleafVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "javax.servlet", module: "servlet-api")
                },
                dependencies.create("com.github.zhanhb:thymeleaf-layout-dialect:$thymeleafDialectVersion") {
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.groovy", module: "groovy")
                    exclude(group: "org.thymeleaf", module: "thymeleaf")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-thymeleaf:$springBootVersion") {
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.thymeleaf", module: "thymeleaf")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "nz.net.ultraq.thymeleaf", module: "thymeleaf-layout-dialect")
                    exclude(group: "org.thymeleaf", module: "thymeleaf-spring5")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.sourceforge.nekohtml", module: "nekohtml")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-mustache:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                },
                dependencies.create("com.samskivert:jmustache:${mustacheVersion}") {
                }
        ],
        scimsdk                    : [
                dependencies.create("de.captaingoldfish:scim-sdk-client:${scimSdkClientVersion}") {
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        jsonschema                  : [
                dependencies.create("com.github.victools:jsonschema-generator:${jsonSchemaVersion}") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("com.github.victools:jsonschema-module-jackson:${jsonSchemaVersion}") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                }
        ],
        jackson                    : [
                dependencies.create("com.fasterxml.jackson.core:jackson-databind:$jacksonDataBindVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("com.fasterxml.jackson.core:jackson-core:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                },
                dependencies.create("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                },
                dependencies.create("com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                },
                dependencies.create("com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                    exclude(group: "jakarta.activation", module: "jakarta.activation-api")
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("org.hjson:hjson:$hjsonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion") {
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-properties:$jacksonVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson", module: "jackson-bom")
                }
        ],
        jcifs                      : [
                dependencies.create("jcifs:jcifs:$jcifsVersion") {
                    exclude(group: "javax.servlet", module: "servlet-api")
                }
        ],
        snakeyaml                  : [
                dependencies.create("org.yaml:snakeyaml:$snakeYamlVersion") {
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-io", module: "commons-io")
                }
        ],
        azurekeyvault              : [
                dependencies.create("com.azure.spring:spring-cloud-azure-starter-keyvault-secrets:$springCloudAzureVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                },
                dependencies.create("com.azure.spring:spring-cloud-azure-starter-keyvault:$springCloudAzureVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                },
                dependencies.create("com.azure.spring:spring-cloud-azure-starter-actuator:$springCloudAzureVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                }
        ],
        azuread                    : [
                dependencies.create("com.microsoft.azure:msal4j:$azureadVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "com.google.code.gson", module: "gson")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                },
                dependencies.create("org.json:json:$jsonVersion") {
                },
                dependencies.create("com.google.code.gson:gson:$gsonVersion") {
                }
        ],
        squareup                   : [
                dependencies.create("com.squareup.retrofit2:retrofit:$retrofitVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.okhttp3", module: "okhttp")
                    exclude(group: "com.squareup.okio", module: "okio")
                },
                dependencies.create("com.squareup.retrofit2:converter-moshi:$retrofitVersion") {
                },
                dependencies.create("com.squareup.okhttp3:okhttp:$okhttp3Version") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("com.squareup.okhttp3:logging-interceptor:$okhttp3Version") {
                }
        ],
        oktasdk                    : [
                dependencies.create("com.okta.authn.sdk:okta-authn-sdk-api:$oktaSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.yaml", module: "snakeyaml")
                },
                dependencies.create("com.okta.authn.sdk:okta-authn-sdk-impl:$oktaSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.yaml", module: "snakeyaml")
                },
                dependencies.create("com.okta.sdk:okta-sdk-httpclient:$oktaHttpClientVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.yaml", module: "snakeyaml")
                }
        ],
        cosmosdb                   : [
                dependencies.create("com.azure:azure-cosmos:$cosmosdbVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jsr310")
                },
                dependencies.create("com.azure:azure-spring-data-cosmos:$springDataCosmosDbVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "com.azure", module: "azure-cosmos")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework.data", module: "spring-data-commons")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.annotation", module: "javax.annotation-api")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-parameter-names")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jsr310")
                    exclude(group: "com.fasterxml.jackson.datatype", module: "jackson-datatype-jdk8")
                }
        ],
        jdom                       : dependencies.create("org.jdom:jdom2:$jdomVersion") {
            exclude(group: "xml-apis", module: "xml-apis")
        },
        jodatime                   : dependencies.create("joda-time:joda-time:$jodaTimeVersion") {
        },
        jose4j                     : dependencies.create("org.bitbucket.b_c:jose4j:$jose4jVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
        },
        jradius                    : [
                dependencies.create("net.jradius:jradius-extras:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("net.jradius:jradius-apps:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("net.jradius:jradius-dictionary:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("net.jradius:jradius-client:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("net.jradius:jradius-extended:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "net.jradius", module: "jradius-server")
                    exclude(group: "net.jradius", module: "jradius-extras")
                    exclude(group: "net.jradius", module: "jradius-client")
                    exclude(group: "net.jradius", module: "jradius-example")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("net.jradius:jradius-core:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("net.jradius:jradius-server:$jradiusVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "commons-lang", module: "commons-lang")
                }
        ],
        tests                      : [
                dependencies.create("com.unboundid:unboundid-ldapsdk:$unboundidVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.mockito:mockito-core:$mockitoVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "junit", module: "junit")
                },
                dependencies.create("org.mockito:mockito-inline:$mockitoInlineVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-core")
                },
                dependencies.create("org.mockito:mockito-junit-jupiter:$mockitoVersion") {
                    exclude(group: "org.mockito", module: "mockito-core")
                    exclude(group: "org.junit.jupiter", module: "junit-jupiter-api")
                },
                dependencies.create("org.springframework.security:spring-security-test:$springSecurityVersion") {
                    exclude(group: "org.springframework.security", module: "spring-security-core")
                    exclude(group: "org.springframework.security", module: "spring-security-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-test")
                },
                dependencies.create("com.squareup.okhttp3:mockwebserver:$okhttp3Version") {
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-api:$junitVersion") {
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-params:$junitVersion") {
                },
                dependencies.create("org.junit.platform:junit-platform-engine:$junitPlatformVersion") {
                },
                dependencies.create("org.junit.platform:junit-platform-suite-api:$junitPlatformVersion") {
                },
                dependencies.create("org.junit.platform:junit-platform-launcher:$junitPlatformVersion") {
                },
                dependencies.create("org.junit.platform:junit-platform-runner:$junitPlatformVersion") {
                },
                dependencies.create("org.awaitility:awaitility:${awaitilityVersion}") {
                    exclude(group: "org.hamcrest", module: "hamcrest")
                    exclude(group: "junit", module: "junit")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.skyscreamer", module: "jsonassert")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.mockito", module: "mockito-all")
                    exclude(group: "org.mockito", module: "mockito-core")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                },
                dependencies.create("org.hsqldb:hsqldb:$hsqlVersion"),
                dependencies.create("org.skyscreamer:jsonassert:$jsonassertVersion") {
                    exclude(group: "org.json", module: "json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                },
                dependencies.create("org.springframework:spring-test:$springVersion") {
                    exclude(group: "junit", module: "junit")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("org.json:json:$jsonVersion") {
                },
                dependencies.create("org.junit-pioneer:junit-pioneer:$junitPioneerVersion") {
                }
        ],
        kryo                       : [
                dependencies.create("com.esotericsoftware:kryo:$kryoVersion") {
                    exclude(group: "net.spy", module: "spymemcached")
                },
                dependencies.create("de.javakaffee:kryo-serializers:$kryoSerializersVersion") {
                    exclude(group: "com.esotericsoftware", module: "kryo")
                }
        ],
        memcached                  : [
                dependencies.create("net.spy:spymemcached:$spymemcachedVersion") {
                }
        ],
        awselasticachememcached    : [
                dependencies.create("com.amazonaws:elasticache-java-cluster-client:$awsmemcachedVersion") {
                }
        ],
        ldaptive                   : [
                dependencies.create("org.ldaptive:ldaptive:$ldaptiveVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("io.netty:netty-handler:$nettyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("io.netty:netty-buffer:$nettyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("io.netty:netty-codec:$nettyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("io.netty:netty-common:$nettyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("io.netty:netty-transport:$nettyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("io.netty:netty-resolver:$nettyVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        fluentd                    : [
                dependencies.create("org.fluentd:fluent-logger:$fluentdVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("io.github.technologize:fluentd-log4j-appender:$fluentdLog4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        log4j                      : [
                dependencies.create("org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j-impl")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j2-impl")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-core")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-jcl")
                },
                dependencies.create("org.apache.logging.log4j:log4j-api:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.logging.log4j:log4j-core:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.logging.log4j:log4j-jcl:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.logging.log4j:log4j-jakarta-web:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.logging.log4j:log4j-layout-template-json:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.logging.log4j:log4j-spring-boot:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-core")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-context")
                },
                dependencies.create("com.lmax:disruptor:$disruptorVersion"),
                dependencies.create("org.apache.logging.log4j:log4j-spring-cloud-config-client:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-config-client")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-starter-bootstrap")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-bus")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-core")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                }
        ],
        slf4j                      : [
                dependencies.create("org.slf4j:slf4j-api:$slf4jVersion"),
                dependencies.create("org.slf4j:jul-to-slf4j:$slf4jVersion")
        ],
        tracingbrave : [
                dependencies.create("io.micrometer:micrometer-tracing-bridge-brave:$micrometerOtelVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.zipkin.reporter2:zipkin-reporter-brave:$zipkinBraveVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                }
        ],
        tracingotel : [
                dependencies.create("io.micrometer:micrometer-tracing-bridge-otel:$micrometerOtelVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                }
        ],
        metrics                    : [
                dependencies.create("io.micrometer:micrometer-core:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-elastic:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-observation:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-prometheus:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-graphite:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-ganglia:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-jmx:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-influx:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-statsd:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-datadog:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-atlas:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-signalfx:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-wavefront:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-new-relic:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("io.micrometer:micrometer-registry-cloudwatch2:$micrometerVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                }
        ],
        mongo                      : [
                dependencies.create("org.mongodb:mongodb-driver-core:$mongoDriverVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.mongodb:mongodb-driver-sync:$mongoDriverVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.mongodb:bson:$mongoDriverVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.springframework.data:spring-data-mongodb:$springDataMongoDbVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.data", module: "spring-data-commons")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongodb-driver-core")
                }
        ],
        opensaml                   : [
                dependencies.create("xerces:xercesImpl:$xercesVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.opensaml:opensaml-core-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-session-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                },
                dependencies.create("org.opensaml:opensaml-xmlsec-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-saml-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                },
                dependencies.create("org.opensaml:opensaml-profile-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-saml-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-security-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-xacml-saml-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-xacml-saml-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-security-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                },
                dependencies.create("org.opensaml:opensaml-soap-api:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-messaging-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.opensaml:opensaml-profile-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                },
                dependencies.create("org.opensaml:opensaml-storage-impl:$opensamlVersion") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-orm")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.ldaptive", module: "ldaptive")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("org.apache.santuario:xmlsec:$xmlSecVersion") {
                    exclude(group: "jakarta.xml.bind", module: "jakarta.xml.bind-api")
                }
        ],
        pac4jcore                  : [
                dependencies.create("org.pac4j:pac4j-config:$pac4jVersion") {
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.projectlombok", module: "lombok")
                },
                dependencies.create("org.pac4j:pac4j-jakartaee:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "org.projectlombok", module: "lombok")
                },
                dependencies.create("org.pac4j:pac4j-http:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.projectlombok", module: "lombok")
                },
                dependencies.create("org.pac4j:pac4j-core:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.projectlombok", module: "lombok")
                }
        ],
        pac4jjwt                   : [
                dependencies.create("org.pac4j:pac4j-jwt:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.projectlombok", module: "lombok")
                }
        ],
        pac4jcas                   : [
                dependencies.create("org.pac4j:pac4j-cas:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.jasig.cas.client", module: "cas-client-support-saml")
                    exclude(group: "org.jasig.cas.client", module: "cas-client-core")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.projectlombok", module: "lombok")
                }
        ],
        pac4jsaml                  : [
                dependencies.create("org.pac4j:pac4j-saml:$pac4jVersion") {
                    exclude(group: "org.apache.santuario", module: "xmlsec")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.annotation", module: "javax.annotation-api")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "net.shibboleth.idp", module: "idp-core")
                    exclude(group: "net.shibboleth.idp", module: "profile-impl")
                    exclude(group: "net.shibboleth.idp", module: "profile-spring")
                    exclude(group: "net.shibboleth.idp", module: "idp-attribute-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-saml-api")
                    exclude(group: "net.shibboleth.idp", module: "idp-saml-impl")
                    exclude(group: "net.shibboleth.idp", module: "idp-profile-api")
                    exclude(group: "net.shibboleth.liberty", module: "idwsfconsumer")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-core-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "xalan", module: "xalan")
                    exclude(group: "xalan", module: "serializer")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "org.projectlombok", module: "lombok")
                }
        ],
        pac4joidcoauth             : [
                dependencies.create("org.pac4j:pac4j-oidc:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.projectlombok", module: "lombok")
                },
                dependencies.create("org.pac4j:pac4j-oauth:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.commons", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.projectlombok", module: "lombok")
                }
        ],
        nimbus                     : [
                dependencies.create("com.nimbusds:nimbus-jose-jwt:$nimbusJoseVersion") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                },
                dependencies.create("com.nimbusds:oauth2-oidc-sdk:$nimbusOidcVersion") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.sun.mail", module: "javax.mail")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                },
                dependencies.create("net.minidev:json-smart:$jsonSmartVersion") {
                },
                dependencies.create("com.github.stephenc.jcip:jcip-annotations:1.0-1") {
                }
        ],
        persondirectory            : dependencies.create("org.apereo.service.persondir:person-directory-impl:$personDirectoryVersion") {
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "org.apache.commons", module: "commons-lang3")
            exclude(group: "org.apache.commons", module: "commons-collections4")
            exclude(group: "org.springframework", module: "spring-beans")
            exclude(group: "org.ldaptive", module: "ldaptive")
            exclude(group: "org.springframework", module: "spring-context")
            exclude(group: "org.springframework", module: "spring-core")
            exclude(group: "org.springframework", module: "spring-tx")
            exclude(group: "com.google.guava", module: "guava")
            exclude(group: "commons-io", module: "commons-io")
            exclude(group: "com.sun.xml.bind", module: "jaxb-impl")
            exclude(group: "com.squareup.retrofit2", module: "retrofit")
            exclude(group: "com.squareup.retrofit2", module: "converter-moshi")
            exclude(group: "com.squareup.okhttp3", module: "logging-interceptor")
        },
        quartz                     : dependencies.create("org.quartz-scheduler:quartz:$quartzVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "c3p0", module: "c3p0")
            exclude(group: "com.mchange", module: "c3p0")
            exclude(group: "com.zaxxer", module: "HikariCP-java6")
            exclude(group: "com.zaxxer", module: "HikariCP-java7")
        },
        twilio                     : dependencies.create("com.twilio.sdk:twilio:$twilioVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "javax.xml.bind", module: "jaxb-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
        },
        nexmo                      : dependencies.create("com.nexmo:client:$nexmoVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "javax.xml.bind", module: "jaxb-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "commons-io", module: "commons-io")
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "commons-codec", module: "commons-codec")
            exclude(group: "org.apache.commons", module: "commons-lang3")
        },
        textmagic                  : [
                dependencies.create("com.textmagic.sdk:textmagic-java-sdk:$textMagicVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.codehaus.jackson", module: "jackson-mapper-asl")
                    exclude(group: "commons-lang", module: "commons-lang")
                },
                dependencies.create("org.codehaus.jackson:jackson-mapper-asl:${jacksonAslVersion}") {
                    transitive = false
                },
                dependencies.create("org.codehaus.jackson:jackson-core-asl:${jacksonAslVersion}") {
                    transitive = false
                }
        ],
        springbootconfigmetadata   : [
                dependencies.create("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("org.jsoup:jsoup:$jsoupVersion"),
                dependencies.create("org.json:json:$jsonVersion") {
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                },
                dependencies.create("org.springframework.boot:spring-boot-configuration-metadata:$springBootVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-reactor-netty")
                    exclude(group: "org.springframework.boot", module: "spring-boot-parent")
                }
        ],
        javaparser                 : [
                dependencies.create("com.github.javaparser:javaparser-core:$javaParserVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                }
        ],
        springbootadminserver      : [
                dependencies.create("de.codecentric:spring-boot-admin-starter-server:$springBootAdminVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                }
        ],
        springbootadminclient      : [
                dependencies.create("de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springbootdevtools         : [
                dependencies.create("org.springframework.boot:spring-boot-devtools:$springBootVersion") {
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        springbootlogging          : [
                dependencies.create("org.springframework.boot:spring-boot-starter-logging:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "com.h2database", module: "h2")
                },
                dependencies.create("ch.qos.logback:logback-core:$logbackVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                },
                dependencies.create("ch.qos.logback:logback-access:$logbackAccessVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                },
                dependencies.create("ch.qos.logback:logback-classic:$logbackVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                }
        ],
        mail                       : [
                dependencies.create("org.springframework.boot:spring-boot-starter-mail:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                },
                dependencies.create("org.eclipse.angus:jakarta.mail:$eclipseAngusMailVersion"),
                dependencies.create("org.eclipse.angus:angus-mail:$eclipseAngusMailVersion")
        ],
        springbootpropertymigrator : [
                dependencies.create("org.springframework.boot:spring-boot-properties-migrator:$springBootVersion") {
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-reactor-netty")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    exclude(group: "org.springframework.boot", module: "spring-boot-parent")
                }
        ],
        springboot                 : [
                dependencies.create("org.springframework.boot:spring-boot-starter-aop:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-reactor-netty")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.aspectj", module: "aspectjweaver")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-json")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                },
                dependencies.create("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "com.h2database", module: "h2")
                },
                dependencies.create("org.springframework.boot:spring-boot:$springBootVersion") {
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                    exclude(group: "io.micrometer", module: "micrometer-jakarta9")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-validation:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                },
                dependencies.create("org.springframework.boot:spring-boot-actuator:$springBootVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "com.fasterxml.jackson.module", module: "jackson-module-jaxb-annotations")
                },
                dependencies.create("io.micrometer:micrometer-jakarta9:$micrometerVersion") {
                }
        ],
        springboottomcat           : [
                dependencies.create("org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion") {
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                },
                dependencies.create("org.apache.tomcat:tomcat-catalina-ha:$tomcatVersion") {
                    exclude(group: "org.apache.tomcat", module: "tomcat-annotations-api")
                    exclude(group: "org.apache.tomcat", module: "tomcat-catalina")
                },
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion") {
                    exclude(group: "org.apache.tomcat", module: "tomcat-annotations-api")
                },
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-el:$tomcatVersion") {
                    exclude(group: "org.apache.tomcat", module: "tomcat-annotations-api")
                }
        ],
        springbootjetty            : [
                dependencies.create("org.springframework.boot:spring-boot-starter-jetty:$springBootVersion") {
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                },
                dependencies.create("jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationApiVersion")
        ],
        springbootundertow         : [
                dependencies.create("org.springframework.boot:spring-boot-starter-undertow:$springBootVersion"),
                dependencies.create("jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationApiVersion")
        ],
        redis                      : [
                dependencies.create("org.springframework.data:spring-data-redis:$springDataRedisVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                },
                dependencies.create("org.springframework.integration:spring-integration-redis:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.springframework.data", module: "spring-data-redis")
                },
                dependencies.create("io.lettuce:lettuce-core:$redisLettuceVersion"),
                dependencies.create("com.redis:lettucemod:$lettuceModVersion") {
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        springintegration          : [
                dependencies.create("org.springframework.integration:spring-integration-core:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.springframework.integration:spring-integration-jmx:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "io.projectreactor", module: "reactor-core")
                }
        ],
        springintegrationjdbc      : [
                dependencies.create("org.springframework.integration:spring-integration-jdbc:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                }
        ],
        springcloudkubernetesconfig: [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8-config:$springCloudKubernetesConfig") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                }
        ],
        springcloudbus             : [
                dependencies.create("org.springframework.cloud:spring-cloud-bus:$springCloudBusVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                },
        ],
        springcloudbuskafka        : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bus-kafka:$springCloudBusVersion") {
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "org.springframework.kafka", module: "spring-kafka")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.scala-lang", module: "scala-library")
                    exclude(group: "org.apache.kafka", module: "kafka-clients")
                }
        ],
        springkafka                : [
                dependencies.create("org.apache.kafka:kafka-streams:$kafkaVersion") {
                },
                dependencies.create("org.apache.kafka:kafka-clients:$kafkaVersion") {
                },
                dependencies.create("org.springframework.kafka:spring-kafka:$springKafkaVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.scala-lang", module: "scala-library")
                }
        ],
        springintegrationamqp      : [
                dependencies.create("org.springframework.integration:spring-integration-amqp:$springIntegrationVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                }
        ],
        springcloudbusamqp         : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-monitor:$springCloudConfigVersion") {
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-bus")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "org.springframework.integration", module: "spring-integration-amqp")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bus-amqp:$springCloudBusVersion") {
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.integration", module: "spring-integration-amqp")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.springframework.amqp", module: "spring-rabbit")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework", module: "spring-messaging")
                }
        ],
        zookeeper                  : [
                dependencies.create("org.apache.zookeeper:zookeeper:$zookeeperVersion") {
                    exclude(group: "jline", module: "jline")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "org.apache.curator", module: "curator-framework")
                    exclude(group: "org.apache.curator", module: "curator-client")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                },
                dependencies.create("org.apache.curator:curator-recipes:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.curator:curator-framework:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.apache.curator:curator-client:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.springframework.integration:spring-integration-zookeeper:$springIntegrationVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                }
        ],
        springcloudconsul          : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-consul-discovery:$springCloudConsulVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-consul-config:$springCloudConsulVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                }
        ],
        springcloudeureka          : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$springCloudEurekaVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.netflix.eureka", module: "eureka-client")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.google.code.gson", module: "gson")
                    exclude(group: "com.thoughtworks.xstream", module: "xstream")
                }
        ],
        eurekaclient               : [
                dependencies.create("com.netflix.eureka:eureka-client:$eurekaClientVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "com.netflix.netflix-commons", module: "netflix-eventbus")
                    exclude(group: "com.google.code.gson", module: "gson")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-aop")
                },
                dependencies.create("com.netflix.netflix-commons:netflix-eventbus:0.3.0") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.netflix.servo", module: "servo-core")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.servlet", module: "servlet-api")
                    exclude(group: "com.thoughtworks.xstream", module: "xstream")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.code.gson", module: "gson")
                }
        ],
        springcloudzookeeper       : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-zookeeper-config:$springCloudZookeeperVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-zookeeper:$springCloudZookeeperVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-zookeeper-discovery:$springCloudZookeeperVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "com.google.code.findbugs", module: "jsr305")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                }
        ],
        springcloudvault           : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-vault-config:$springCloudVaultVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.apache.httpcomponents", module: "httpcore")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                }
        ],
        springcloudconfigclient    : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-client:$springCloudConfigVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                }
        ],
        springcloudconfigserver    : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-server:$springCloudConfigVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework.security", module: "spring-security-core")
                    exclude(group: "org.springframework.security", module: "spring-security-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                }
        ],
        springcloudbootstrap       : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bootstrap:$springCloudCommonsVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                }
        ],
        springcloud                : [
                dependencies.create("org.springframework.cloud:spring-cloud-commons:$springCloudCommonsVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                },
                dependencies.create("org.springframework.cloud:spring-cloud-context:$springCloudCommonsVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate.validator", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                }
        ],
        springsession              : [
                dependencies.create("org.springframework.session:spring-session-core:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springsessionhazelcast     : [
                dependencies.create("org.springframework.session:spring-session-hazelcast:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springsessionjdbc          : [
                dependencies.create("org.springframework.session:spring-session-jdbc:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springsessionredis         : [
                dependencies.create("org.springframework.session:spring-session-data-redis:$springSessionVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springsessionmongo         : [
                dependencies.create("org.springframework.session:spring-session-data-mongodb:$springSessionMongoVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework.session", module: "spring-session")
                }
        ],

        springshell                : [
                dependencies.create("org.springframework.shell:spring-shell-starter:$springShellVersion") {
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "jline", module: "jline")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "com.h2database", module: "h2")
                }
        ],
        springindexer              : [
                dependencies.create("org.springframework:spring-context-indexer:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                }
        ],
        spring                     : [
                dependencies.create("org.springframework:spring-aop:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                },
                dependencies.create("org.springframework:spring-beans:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                },
                dependencies.create("org.springframework:spring-context:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-beans")
                },
                dependencies.create("org.springframework:spring-context-support:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-beans")
                },
                dependencies.create("org.springframework.retry:spring-retry:$springRetryVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-core")
                },
                dependencies.create("org.springframework:spring-core:$springVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-jcl")
                },
                dependencies.create("org.springframework:spring-jcl:$springVersion") {
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.springframework.data:spring-data-commons:$springDataCommonsVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    exclude(group: "com.h2database", module: "h2")
                },
                dependencies.create("org.springframework:spring-jms:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-messaging")
                },
                dependencies.create("org.springframework:spring-messaging:$springVersion") {
                },
                dependencies.create("org.springframework:spring-expression:$springVersion") {
                },
                dependencies.create("org.springframework:spring-jdbc:$springVersion") {
                },
                dependencies.create("org.springframework:spring-orm:$springVersion"),
                dependencies.create("org.springframework:spring-tx:$springVersion") {
                },
                dependencies.create("org.springframework:spring-web:$springVersion") {
                },
                dependencies.create("org.springframework:spring-webmvc:$springVersion") {
                }
        ],
        springwebflow              : [
                dependencies.create("org.springframework.webflow:spring-webflow:$springWebflowVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                },
                dependencies.create("org.springframework.webflow:spring-binding:$springWebflowVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        springsecurityconfig       : [
                dependencies.create("org.springframework.security:spring-security-config:$springSecurityVersion") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        springsecurityweb          : [
                dependencies.create("org.springframework.security:spring-security-web:$springSecurityVersion") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ],
        springsecurity             : [
                dependencies.create("org.springframework.security:spring-security-core:$springSecurityVersion") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.springframework.security:spring-security-rsa:$springSecurityRsaVersion") {
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                },
                dependencies.create("org.springframework.security:spring-security-crypto:$springSecurityVersion") {
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-tx")
                }
        ],
        springws                   : [
                dependencies.create("xerces:xercesImpl:$xercesVersion") {
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-web-services:$springBootVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                },
                dependencies.create("org.springframework.ws:spring-ws-security:$springWsVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                },
                dependencies.create("org.springframework.ws:spring-ws-support:$springWsVersion") {
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                },
                dependencies.create("com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion") {
                },
        ],
        wss4j                      : [
                dependencies.create("com.github.mmoayyed.ws-wss4j:wss4j-bindings:$wss4jVersion") {
                },
                dependencies.create("com.github.mmoayyed.ws-wss4j:wss4j-policy:$wss4jVersion") {
                },
                dependencies.create("com.github.mmoayyed.ws-wss4j:wss4j-ws-security-stax:$wss4jVersion") {
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("com.github.mmoayyed.ws-wss4j:wss4j-ws-security-policy-stax:$wss4jVersion") {
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("com.github.mmoayyed.ws-wss4j:wss4j-ws-security-dom:$wss4jVersion") {
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                },
                dependencies.create("com.github.mmoayyed.ws-wss4j:wss4j-ws-security-common:$wss4jVersion") {
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-soap-impl")
                    exclude(group: "org.opensaml", module: "opensaml-storage-api")
                    exclude(group: "org.opensaml", module: "opensaml-storage-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xacml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                },
                dependencies.create("wsdl4j:wsdl4j:$wsdl4jVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                },
                dependencies.create("com.sun.xml.messaging.saaj:saaj-impl:$saajImplVersion") {
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-dom")
                    exclude(group: "org.jvnet.mimepull", module: "mimepull")
                    exclude(group: "org.apache.wss4j", module: "wss4j-ws-security-common")
                },
                dependencies.create("org.apache.santuario:xmlsec:$xmlSecVersion") {
                    exclude(group: "jakarta.xml.bind", module: "jakarta.xml.bind-api")
                }
        ],
        yubicoapi                  :
                dependencies.create("com.yubico:yubico-validation-client2:$yubicoVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-codec", module: "commons-codec")
                },
        duojava                    : [
                dependencies.create("com.duosecurity:duo-client:$duoClientVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("com.duosecurity:duo-universal-sdk:$duoUniversalSdkVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.squareup.retrofit", module: "retrofit")
                    exclude(group: "org.projectlombok", module: "lombok")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.squareup.okhttp3", module: "logging-interceptor")
                }
        ],
        bucket4j                   : [
                dependencies.create("com.github.vladimir-bukhtoyarov:bucket4j-core:$bucket4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.json", module: "json")
                }
        ],
        webjarsbootstrap : [
                dependencies.create("org.webjars:bootstrap:$bootstrapVersion") {
                    exclude(group: "org.webjars", module: "popper.js")
                    exclude(group: "org.webjars", module: "jquery")
                },
                dependencies.create("org.webjars:font-awesome:$fontAwesomeVersion") {
                }
        ],
        webjars                    : [
                dependencies.create("org.webjars:jquery:$jqueryVersion") {},
                dependencies.create("org.webjars:highlightjs:$highlightJsVersion") {},
                dependencies.create("org.webjars:zxcvbn:$zxcvbnVersion") {
                },
                dependencies.create("org.webjars:datatables:$datatablesVersion") {
                    exclude(group: "org.webjars", module: "jquery")
                },
                dependencies.create("org.webjars:bootstrap-select:$bootstrapSelectVersion") {
                    exclude(group: "org.webjars", module: "jquery")
                    exclude(group: "org.webjars", module: "bootstrap")
                },
                dependencies.create("org.webjars.npm:material-components-web:$materialVersion") {
                },
                dependencies.create("org.webjars.npm:mdi__font:$mdiFontVersion") {
                },
                dependencies.create("org.webjars.npm:normalize.css:$normalizeVersion") {
                },
                dependencies.create("org.webjars:es5-shim:$es5ShimVersion") {
                },
                dependencies.create("org.webjars.npm:css-vars-ponyfill:$cssVarsPonyfillVersion") {
                },
                dependencies.create("org.webjars.npm:text-encoding:$textEncodingVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.webjars.npm:whatwg-fetch:$whatWgFetchVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.webjars.npm:base64-js:$base64JsVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                },
                dependencies.create("org.webjars.npm:clientjs:${clientJsVersion}") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                }
        ]
]
