import org.gradle.internal.logging.*
import org.gradle.internal.logging.events.*

import java.util.regex.Pattern

tasks.withType(Javadoc) {
    def exceptions = []
    doFirst {
        gradle.services.get(LoggingOutputInternal).addOutputEventListener(new OutputEventListener() {
            void onOutput(OutputEvent event) {
                if (event.toString() =~ " warning: ") {
                    exceptions << new GradleException("Javadoc warning: ${event.toString()}")
                }
            }
        })
    }
    doLast {
        exceptions.each {
            throw it
        }
    }
}

task pathingJar(type: Jar, description: "Produces a 'pathing' JAR whose manifest class-path contains project runtime dependencies") {
    dependsOn configurations.runtimeClasspath
    appendix = "pathing"

    doFirst {
        manifest {
            attributes "Class-Path":
            configurations.runtimeClasspath.files.collect {
                it.toURL().toString().replaceFirst("/file:/+/", "/")
            }
            .join(" ")
        }
    }
}

task testJar(type: Jar, dependsOn: testClasses, description: "archive the testClasses") {
    archiveBaseName = "${project.archivesBaseName}-tests"
    archiveClassifier = "tests"
    from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

task resourcesJar(type: Jar) {
    classifier "resources"
    from project.file("src/main/resources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

task cleanLogs(description: "Clean build log files") {
    delete fileTree(dir: project.projectDir, includes: ["**/*.log", "**/*.gz", "**/*.log.gz", "**/*.orig"])
}

task showConfiguration {
    description "Shows the configuration used by the build"
    doLast() {
        def cfg = project.hasProperty("configuration") ? project.property("configuration") : "compile"
        configurations.getByName(cfg).each { println it }
    }
}

task downloadDependencies {
    description "Pre-download project dependencies for all configurations"
    doLast {
        configurations.getAsMap().each { name, config ->
            logger.info "Retrieving dependencies for $project:$name"
            try {
                config.files
            } catch (e) {
                project.logger.info e.message
            }
        }
    }
}

task outputDependenciesWithoutLicense(description: "Output dependencies without approved license") {
    doLast {
        def results = file("${project.buildDir}/licenses/dependencies-without-allowed-license.json")
        if (results.exists()) {
            def slurper = new groovy.json.JsonSlurper()
            def dependencies = slurper.parseText(results.text)
            if (!dependencies.dependenciesWithoutAllowedLicenses.isEmpty()) {
                println results.text
                throw new GradleException("Dependencies found without allowed licenses")
            }
        }
    }
}

clean.dependsOn("cleanLogs")
