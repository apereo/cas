configurations.all {
    resolutionStrategy {
        if (!Boolean.getBoolean("skipVersionConflict")) {
            failOnVersionConflict()
        }
        preferProjectModules()

        cacheDynamicVersionsFor 0, 'days'
        cacheChangingModulesFor 0, 'days'

        def dependencyUpdates = gradle.startParameter.taskNames.any {task -> task.equalsIgnoreCase('dependencyUpdates') }
        if (!dependencyUpdates) {
            eachDependency { DependencyResolveDetails details ->
                def requested = details.requested
                if (requested.group == "gnu-getopt")  {
                    details.useTarget group: "gnu.getopt", name: "java-getopt", version: details.requested.version
                }
                if (requested.group == "com.h2database")  {
                    details.useVersion("${h2Version}")
                }
                if (requested.group == "org.hibernate")  {
                    details.useVersion("${hibernateVersion}")
                }
                if (requested.group == "org.postgresql")  {
                    details.useVersion("${postgresqlVersion}")
                }
                if (requested.group == "com.hazelcast" && requested.name == "hazelcast")  {
                    details.useVersion("${hazelcastVersion}")
                }
                if (requested.group == "org.infinispan")  {
                    details.useVersion("${infinispanVersion}")
                }
                if (requested.group == "org.springframework")  {
                    details.useVersion("${springVersion}")
                }
                if (requested.group == "org.springframework.session")  {
                    if (requested.name == "spring-session-data-mongodb") {
                        details.useVersion("${springSessionMongoVersion}")
                    } else {
                        details.useVersion("${springSessionVersion}")
                    }
                }
                if (requested.group == "org.apache.tomcat")  {
                    details.useVersion("${tomcatVersion}")
                }
                if (requested.group == "org.hsqldb")  {
                    details.useVersion("${hsqlVersion}")
                }
                if (requested.group == "org.mariadb.jdbc")  {
                    details.useVersion("${mariaDbVersion}")
                }
                if (requested.group == "com.microsoft.sqlserver")  {
                    details.useVersion("${mssqlServerVersion}")
                }
                if (requested.group == "com.oracle.ojdbc:ojdbc10")  {
                    details.useVersion("${oracleJdbcVersion}")
                }
                if (requested.group == "org.mongodb")  {
                    details.useVersion("${mongoDriverVersion}")
                }
                if (requested.group == "mysql")  {
                    details.useVersion("${mysqlVersion}")
                }
                if (requested.group == "net.sourceforge.jtds")  {
                    details.useVersion("${jtdsVersion}")
                }
                if (requested.group == "com.couchbase.client" && details.requested.name == "java-client")  {
                    details.useVersion("${couchbaseVersion}")
                }
                if (requested.group == "com.github.ben-manes.caffeine")  {
                    details.useVersion("${caffeinVersion}")
                }
                if (requested.group == "org.apache.logging.log4j")  {
                    details.useVersion("${log4jVersion}")
                }
                if (requested.group == "org.codehaus.groovy")  {
                    details.useVersion("${groovyVersion}")
                }
                if (requested.group == "com.zaxxer")  {
                    details.useVersion("${hikariVersion}")
                }
                if (requested.group == "org.thymeleaf")  {
                    details.useVersion("${thymeleafVersion}")
                }
                if (requested.group == "nz.net.ultraq.thymeleaf" && requested.name == "thymeleaf-layout-dialect")  {
                    details.useVersion("${thymeleafDialectVersion}")
                }
                if (requested.group == "commons-beanutils" && requested.name == "commons-beanutils")  {
                    details.useVersion("${commonsBeansVersion}")
                }
                if (requested.group == "ch.qos.logback")  {
                    details.useVersion("${logbackVersion}")
                }
                if (requested.group == "org.apache.httpcomponents")  {
                    if (details.requested.name == "httpcore") {
                        details.useVersion("${httpCoreVersion}")
                    } else {
                        details.useVersion("${httpclientVersion}")
                    }
                }
                if (requested.group.startsWith("com.fasterxml.jackson"))  {
                    details.useVersion("${jacksonVersion}")
                }
                if (requested.group == "io.micrometer")  {
                    details.useVersion("${micrometerVersion}")
                }
                if (requested.group == "com.timgroup")  {
                    details.useVersion("${statsdVersion}")
                }
                if (requested.group == "com.signalfx.public")  {
                    details.useVersion("${signalFxVersion}")
                }
            }
        }
    }
    exclude(group: "cglib", module: "cglib")
    exclude(group: "cglib", module: "cglib-full")
    exclude(group: "org.slf4j", module: "slf4j-log4j12")
    exclude(group: "org.slf4j", module: "slf4j-simple")
    exclude(group: "org.apache.logging.log4j", module: "log4j-to-slf4j")
    exclude(group: "pull-parser", module: "pull-parser")
}

ext["couchbase-client.version"] = ext["couchbaseVersion"]
ext["caffeine.version"] = ext["caffeinVersion"]
ext["commons-beanutils.version"] = ext["commonsBeansVersion"]
ext["hazelcast.version"] = ext["hazelcastVersion"]
ext["hibernate.version"] = ext["hibernateVersion"]
ext["tomcat.version"] = ext["tomcatVersion"]
ext["infinispan.version"] = ext["infinispanVersion"]
ext["h2.version"] = ext["h2Version"]
ext["spring.version"] = ext["springVersion"]
ext["jackson.version"] = ext["jacksonVersion"]
ext["thymeleaf.version"] = ext["thymeleafVersion"]
ext["thymeleaf-layout-dialect.version"] = ext["thymeleafDialectVersion"]
ext["spring-session.version"] = ext["springSessionVersion"]
ext["hsqldb.version"] = ext["hsqlVersion"]
ext["httpcore.version"] = ext["httpCoreVersion"]
ext["hikaricp.version"] = ext["hikariVersion"]
ext["groovy.version"] = ext["groovyVersion"]
ext["log4j2.version"] = ext["log4jVersion"]
ext["logback.version"] = ext["logbackVersion"]
ext["commons-beanutils.version"] = ext["commonsBeansVersion"]
ext["mysql.version"] = ext["mysqlVersion"]
ext["postgresql.version"] = ext["postgresqlVersion"]
ext["mariadb.version"] = ext["mariaDbVersion"]
ext["jtds.version"] = ext["jtdsVersion"]
ext["mssql-jdbc.version"] = ext["mssqlServerVersion"]
ext["mongodb.version"] = ext["mongoDriverVersion"]
ext["micrometer.version"] = ext["micrometerVersion"]
