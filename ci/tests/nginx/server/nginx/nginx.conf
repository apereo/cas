#nginx
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log debug;
pid /run/nginx.pid;

# Add the "events" block here
events {
    worker_connections 1024;
}

#HTTPS block context
http {
    include /etc/nginx/mime.types;
    include /etc/nginx/conf.d/*.conf; # Include all files in conf.d directory
    include /etc/nginx/sites-enabled/*; # Include all files in the sites-enabled directory
    default_type application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Server block context for HTTP connections
    server {
        listen 80;
        server_name cas.apereo.org;
        return 301 https://$host:4443$request_uri;
    }

    server {
        listen       8888;
        server_name  _;

        location /cas {
            proxy_pass https://host.docker.internal:8443;
            proxy_set_header   Host "foo.example.com";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cookie_path /cas/tenants/shire /cas;
            proxy_cookie_domain host.docker.internal foo.example.com;
        }
    }

    server {
        listen       8889;
        server_name  _;

        location /cas {
            proxy_pass https://host.docker.internal:8443;
            proxy_set_header   Host "london.example.com";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cookie_path /cas/tenants/london /cas;
            proxy_cookie_domain host.docker.internal foo.example.com;
        }
    }
    
    server {
        listen 443 ssl;
        server_name cas.apereo.org;
        large_client_header_buffers 4 32k;
        
        # SSL certificate configuration
        ssl_certificate /etc/nginx/ssl/cas.crt;
        ssl_certificate_key /etc/nginx/ssl/cas.key;

        # SSL protocols and ciphers
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;

        ssl_prefer_server_ciphers on;

        # HTTP to HTTPS redirection
        if ($scheme != 'https') {
            return 301 https://$server_name:4443$request_uri;
        }
        proxy_intercept_errors on;
        proxy_ssl_verify off;
        underscores_in_headers on;

        location / {
            proxy_pass_request_headers on;
            proxy_read_timeout 90;

            auth_basic              "restricted site";

            # sudo sh -c "echo -n 'admin:' >> /etc/nginx/.htpasswd"
            # sudo sh -c "openssl passwd -apr1 >> /etc/nginx/.htpasswd"
            # default is: admin/password
            auth_basic_user_file    /etc/nginx/.htpasswd;
            proxy_set_header        X-Remote-User $remote_user;
            proxy_set_header        X-Forwarded-User $remote_user;
            proxy_set_header        REMOTE_USER $remote_user;
            proxy_pass_header       $remote_user;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass https://host.docker.internal:8443;
        }
        
        location = /api {
            auth_request /authorize;

            proxy_intercept_errors on;
            proxy_ssl_verify off;
            
            proxy_pass https://host.docker.internal:9859/anything/api;

            # Pass original client request headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            error_page 401 = /unauthenticated;
            error_page 403 = /forbidden;
            error_page 400 = /badrequest;
        }

        location = /authorize {
            internal;

            proxy_intercept_errors on;
            proxy_ssl_verify off;

            proxy_pass https://host.docker.internal:8443/cas/heimdall/authorize;
            proxy_set_header Content-Type application/json;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Original-Method $request_method;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Host $host;
            proxy_set_header X-Original-Headers $http_authorization;
            proxy_set_body '{"method": "$request_method", "client_ip": "$remote_addr", "uri": "$request_uri", "headers": {"user-agent": "$http_user_agent", "host": "$host"}}';
        }

        location = /forbidden {
            internal;
            default_type application/json;
            return 403 '{"error": "Access Denied"}';
        }
        location = /unauthenticated {
            internal;
            default_type application/json;
            return 401 '{"error": "Unauthenticated Request"}';
        }
        location = /badrequest {
            internal;
            default_type application/json;
            return 400 '{"error": "Bad Request"}';
        }
  }
}
